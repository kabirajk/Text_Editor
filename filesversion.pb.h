// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesversion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_filesversion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_filesversion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_filesversion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_filesversion_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_filesversion_2eproto;
namespace fileVer {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Filedata;
struct FiledataDefaultTypeInternal;
extern FiledataDefaultTypeInternal _Filedata_default_instance_;
}  // namespace fileVer
PROTOBUF_NAMESPACE_OPEN
template<> ::fileVer::File* Arena::CreateMaybeMessage<::fileVer::File>(Arena*);
template<> ::fileVer::Filedata* Arena::CreateMaybeMessage<::fileVer::Filedata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fileVer {

// ===================================================================

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fileVer.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fileVer.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextlineFieldNumber = 4,
    kCreatedtimeFieldNumber = 2,
    kVersionFieldNumber = 1,
    kCommitcountFieldNumber = 3,
  };
  // repeated string textline = 4;
  int textline_size() const;
  private:
  int _internal_textline_size() const;
  public:
  void clear_textline();
  const std::string& textline(int index) const;
  std::string* mutable_textline(int index);
  void set_textline(int index, const std::string& value);
  void set_textline(int index, std::string&& value);
  void set_textline(int index, const char* value);
  void set_textline(int index, const char* value, size_t size);
  std::string* add_textline();
  void add_textline(const std::string& value);
  void add_textline(std::string&& value);
  void add_textline(const char* value);
  void add_textline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& textline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_textline();
  private:
  const std::string& _internal_textline(int index) const;
  std::string* _internal_add_textline();
  public:

  // optional string createdtime = 2;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdtime();
  PROTOBUF_NODISCARD std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional int32 Version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 commitcount = 3;
  bool has_commitcount() const;
  private:
  bool _internal_has_commitcount() const;
  public:
  void clear_commitcount();
  int32_t commitcount() const;
  void set_commitcount(int32_t value);
  private:
  int32_t _internal_commitcount() const;
  void _internal_set_commitcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fileVer.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> textline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
  int32_t version_;
  int32_t commitcount_;
  friend struct ::TableStruct_filesversion_2eproto;
};
// -------------------------------------------------------------------

class Filedata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fileVer.Filedata) */ {
 public:
  inline Filedata() : Filedata(nullptr) {}
  ~Filedata() override;
  explicit PROTOBUF_CONSTEXPR Filedata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filedata(const Filedata& from);
  Filedata(Filedata&& from) noexcept
    : Filedata() {
    *this = ::std::move(from);
  }

  inline Filedata& operator=(const Filedata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filedata& operator=(Filedata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filedata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filedata* internal_default_instance() {
    return reinterpret_cast<const Filedata*>(
               &_Filedata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Filedata& a, Filedata& b) {
    a.Swap(&b);
  }
  inline void Swap(Filedata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filedata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Filedata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Filedata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Filedata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Filedata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filedata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fileVer.Filedata";
  }
  protected:
  explicit Filedata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledatabaseFieldNumber = 1,
    kFilenameFieldNumber = 3,
    kCurrentversionFieldNumber = 2,
  };
  // repeated .fileVer.File filedatabase = 1;
  int filedatabase_size() const;
  private:
  int _internal_filedatabase_size() const;
  public:
  void clear_filedatabase();
  ::fileVer::File* mutable_filedatabase(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileVer::File >*
      mutable_filedatabase();
  private:
  const ::fileVer::File& _internal_filedatabase(int index) const;
  ::fileVer::File* _internal_add_filedatabase();
  public:
  const ::fileVer::File& filedatabase(int index) const;
  ::fileVer::File* add_filedatabase();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileVer::File >&
      filedatabase() const;

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional int32 currentversion = 2;
  bool has_currentversion() const;
  private:
  bool _internal_has_currentversion() const;
  public:
  void clear_currentversion();
  int32_t currentversion() const;
  void set_currentversion(int32_t value);
  private:
  int32_t _internal_currentversion() const;
  void _internal_set_currentversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fileVer.Filedata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileVer::File > filedatabase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int32_t currentversion_;
  friend struct ::TableStruct_filesversion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// optional int32 Version = 1;
inline bool File::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool File::has_version() const {
  return _internal_has_version();
}
inline void File::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t File::_internal_version() const {
  return version_;
}
inline int32_t File::version() const {
  // @@protoc_insertion_point(field_get:fileVer.File.Version)
  return _internal_version();
}
inline void File::_internal_set_version(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void File::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fileVer.File.Version)
}

// optional string createdtime = 2;
inline bool File::_internal_has_createdtime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void File::clear_createdtime() {
  createdtime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::createdtime() const {
  // @@protoc_insertion_point(field_get:fileVer.File.createdtime)
  return _internal_createdtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_createdtime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 createdtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fileVer.File.createdtime)
}
inline std::string* File::mutable_createdtime() {
  std::string* _s = _internal_mutable_createdtime();
  // @@protoc_insertion_point(field_mutable:fileVer.File.createdtime)
  return _s;
}
inline const std::string& File::_internal_createdtime() const {
  return createdtime_.Get();
}
inline void File::_internal_set_createdtime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  createdtime_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_createdtime() {
  _has_bits_[0] |= 0x00000001u;
  return createdtime_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_createdtime() {
  // @@protoc_insertion_point(field_release:fileVer.File.createdtime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = createdtime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdtime_.IsDefault()) {
    createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  createdtime_.SetAllocated(createdtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdtime_.IsDefault()) {
    createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fileVer.File.createdtime)
}

// optional int32 commitcount = 3;
inline bool File::_internal_has_commitcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_commitcount() const {
  return _internal_has_commitcount();
}
inline void File::clear_commitcount() {
  commitcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t File::_internal_commitcount() const {
  return commitcount_;
}
inline int32_t File::commitcount() const {
  // @@protoc_insertion_point(field_get:fileVer.File.commitcount)
  return _internal_commitcount();
}
inline void File::_internal_set_commitcount(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  commitcount_ = value;
}
inline void File::set_commitcount(int32_t value) {
  _internal_set_commitcount(value);
  // @@protoc_insertion_point(field_set:fileVer.File.commitcount)
}

// repeated string textline = 4;
inline int File::_internal_textline_size() const {
  return textline_.size();
}
inline int File::textline_size() const {
  return _internal_textline_size();
}
inline void File::clear_textline() {
  textline_.Clear();
}
inline std::string* File::add_textline() {
  std::string* _s = _internal_add_textline();
  // @@protoc_insertion_point(field_add_mutable:fileVer.File.textline)
  return _s;
}
inline const std::string& File::_internal_textline(int index) const {
  return textline_.Get(index);
}
inline const std::string& File::textline(int index) const {
  // @@protoc_insertion_point(field_get:fileVer.File.textline)
  return _internal_textline(index);
}
inline std::string* File::mutable_textline(int index) {
  // @@protoc_insertion_point(field_mutable:fileVer.File.textline)
  return textline_.Mutable(index);
}
inline void File::set_textline(int index, const std::string& value) {
  textline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fileVer.File.textline)
}
inline void File::set_textline(int index, std::string&& value) {
  textline_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fileVer.File.textline)
}
inline void File::set_textline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  textline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fileVer.File.textline)
}
inline void File::set_textline(int index, const char* value, size_t size) {
  textline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fileVer.File.textline)
}
inline std::string* File::_internal_add_textline() {
  return textline_.Add();
}
inline void File::add_textline(const std::string& value) {
  textline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fileVer.File.textline)
}
inline void File::add_textline(std::string&& value) {
  textline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fileVer.File.textline)
}
inline void File::add_textline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  textline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fileVer.File.textline)
}
inline void File::add_textline(const char* value, size_t size) {
  textline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fileVer.File.textline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
File::textline() const {
  // @@protoc_insertion_point(field_list:fileVer.File.textline)
  return textline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
File::mutable_textline() {
  // @@protoc_insertion_point(field_mutable_list:fileVer.File.textline)
  return &textline_;
}

// -------------------------------------------------------------------

// Filedata

// repeated .fileVer.File filedatabase = 1;
inline int Filedata::_internal_filedatabase_size() const {
  return filedatabase_.size();
}
inline int Filedata::filedatabase_size() const {
  return _internal_filedatabase_size();
}
inline void Filedata::clear_filedatabase() {
  filedatabase_.Clear();
}
inline ::fileVer::File* Filedata::mutable_filedatabase(int index) {
  // @@protoc_insertion_point(field_mutable:fileVer.Filedata.filedatabase)
  return filedatabase_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileVer::File >*
Filedata::mutable_filedatabase() {
  // @@protoc_insertion_point(field_mutable_list:fileVer.Filedata.filedatabase)
  return &filedatabase_;
}
inline const ::fileVer::File& Filedata::_internal_filedatabase(int index) const {
  return filedatabase_.Get(index);
}
inline const ::fileVer::File& Filedata::filedatabase(int index) const {
  // @@protoc_insertion_point(field_get:fileVer.Filedata.filedatabase)
  return _internal_filedatabase(index);
}
inline ::fileVer::File* Filedata::_internal_add_filedatabase() {
  return filedatabase_.Add();
}
inline ::fileVer::File* Filedata::add_filedatabase() {
  ::fileVer::File* _add = _internal_add_filedatabase();
  // @@protoc_insertion_point(field_add:fileVer.Filedata.filedatabase)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileVer::File >&
Filedata::filedatabase() const {
  // @@protoc_insertion_point(field_list:fileVer.Filedata.filedatabase)
  return filedatabase_;
}

// optional int32 currentversion = 2;
inline bool Filedata::_internal_has_currentversion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Filedata::has_currentversion() const {
  return _internal_has_currentversion();
}
inline void Filedata::clear_currentversion() {
  currentversion_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Filedata::_internal_currentversion() const {
  return currentversion_;
}
inline int32_t Filedata::currentversion() const {
  // @@protoc_insertion_point(field_get:fileVer.Filedata.currentversion)
  return _internal_currentversion();
}
inline void Filedata::_internal_set_currentversion(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  currentversion_ = value;
}
inline void Filedata::set_currentversion(int32_t value) {
  _internal_set_currentversion(value);
  // @@protoc_insertion_point(field_set:fileVer.Filedata.currentversion)
}

// optional string filename = 3;
inline bool Filedata::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Filedata::has_filename() const {
  return _internal_has_filename();
}
inline void Filedata::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Filedata::filename() const {
  // @@protoc_insertion_point(field_get:fileVer.Filedata.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filedata::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fileVer.Filedata.filename)
}
inline std::string* Filedata::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:fileVer.Filedata.filename)
  return _s;
}
inline const std::string& Filedata::_internal_filename() const {
  return filename_.Get();
}
inline void Filedata::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Filedata::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Filedata::release_filename() {
  // @@protoc_insertion_point(field_release:fileVer.Filedata.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Filedata::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fileVer.Filedata.filename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fileVer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_filesversion_2eproto
