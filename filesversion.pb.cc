// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesversion.proto

#include "filesversion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace fileVer {
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized)
  : textline_()
  , createdtime_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(0)
  , commitcount_(0){}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR Filedata::Filedata(
    ::_pbi::ConstantInitialized)
  : filedatabase_()
  , filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , currentversion_(0){}
struct FiledataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FiledataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FiledataDefaultTypeInternal() {}
  union {
    Filedata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FiledataDefaultTypeInternal _Filedata_default_instance_;
}  // namespace fileVer
static ::_pb::Metadata file_level_metadata_filesversion_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_filesversion_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_filesversion_2eproto = nullptr;

const uint32_t TableStruct_filesversion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fileVer::File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fileVer::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fileVer::File, version_),
  PROTOBUF_FIELD_OFFSET(::fileVer::File, createdtime_),
  PROTOBUF_FIELD_OFFSET(::fileVer::File, commitcount_),
  PROTOBUF_FIELD_OFFSET(::fileVer::File, textline_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fileVer::Filedata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fileVer::Filedata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fileVer::Filedata, filedatabase_),
  PROTOBUF_FIELD_OFFSET(::fileVer::Filedata, currentversion_),
  PROTOBUF_FIELD_OFFSET(::fileVer::Filedata, filename_),
  ~0u,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::fileVer::File)},
  { 14, 23, -1, sizeof(::fileVer::Filedata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::fileVer::_File_default_instance_._instance,
  &::fileVer::_Filedata_default_instance_._instance,
};

const char descriptor_table_protodef_filesversion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022filesversion.proto\022\007fileVer\"\216\001\n\004File\022\024"
  "\n\007Version\030\001 \001(\005H\000\210\001\001\022\030\n\013createdtime\030\002 \001("
  "\tH\001\210\001\001\022\030\n\013commitcount\030\003 \001(\005H\002\210\001\001\022\020\n\010text"
  "line\030\004 \003(\tB\n\n\010_VersionB\016\n\014_createdtimeB\016"
  "\n\014_commitcount\"\203\001\n\010Filedata\022#\n\014filedatab"
  "ase\030\001 \003(\0132\r.fileVer.File\022\033\n\016currentversi"
  "on\030\002 \001(\005H\000\210\001\001\022\025\n\010filename\030\003 \001(\tH\001\210\001\001B\021\n\017"
  "_currentversionB\013\n\t_filenameb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_filesversion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_filesversion_2eproto = {
    false, false, 316, descriptor_table_protodef_filesversion_2eproto,
    "filesversion.proto",
    &descriptor_table_filesversion_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_filesversion_2eproto::offsets,
    file_level_metadata_filesversion_2eproto, file_level_enum_descriptors_filesversion_2eproto,
    file_level_service_descriptors_filesversion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_filesversion_2eproto_getter() {
  return &descriptor_table_filesversion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_filesversion_2eproto(&descriptor_table_filesversion_2eproto);
namespace fileVer {

// ===================================================================

class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_createdtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commitcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  textline_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:fileVer.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      textline_(from.textline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  createdtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    createdtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_createdtime()) {
    createdtime_.Set(from._internal_createdtime(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitcount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(commitcount_));
  // @@protoc_insertion_point(copy_constructor:fileVer.File)
}

inline void File::SharedCtor() {
createdtime_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  createdtime_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commitcount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(commitcount_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:fileVer.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  createdtime_.Destroy();
}

void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:fileVer.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    createdtime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commitcount_) -
        reinterpret_cast<char*>(&version_)) + sizeof(commitcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string createdtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_createdtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fileVer.File.createdtime"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 commitcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_commitcount(&has_bits);
          commitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string textline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_textline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fileVer.File.textline"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fileVer.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 Version = 1;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional string createdtime = 2;
  if (_internal_has_createdtime()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdtime().data(), static_cast<int>(this->_internal_createdtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fileVer.File.createdtime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_createdtime(), target);
  }

  // optional int32 commitcount = 3;
  if (_internal_has_commitcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_commitcount(), target);
  }

  // repeated string textline = 4;
  for (int i = 0, n = this->_internal_textline_size(); i < n; i++) {
    const auto& s = this->_internal_textline(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fileVer.File.textline");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileVer.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileVer.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string textline = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(textline_.size());
  for (int i = 0, n = textline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      textline_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string createdtime = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_createdtime());
    }

    // optional int32 Version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional int32 commitcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_commitcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }

void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<File *>(to)->MergeFrom(
      static_cast<const File &>(from));
}


void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileVer.File)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  textline_.MergeFrom(from.textline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_createdtime(from._internal_createdtime());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      commitcount_ = from.commitcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileVer.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  textline_.InternalSwap(&other->textline_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &createdtime_, lhs_arena,
      &other->createdtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, commitcount_)
      + sizeof(File::commitcount_)
      - PROTOBUF_FIELD_OFFSET(File, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_filesversion_2eproto_getter, &descriptor_table_filesversion_2eproto_once,
      file_level_metadata_filesversion_2eproto[0]);
}

// ===================================================================

class Filedata::_Internal {
 public:
  using HasBits = decltype(std::declval<Filedata>()._has_bits_);
  static void set_has_currentversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Filedata::Filedata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filedatabase_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:fileVer.Filedata)
}
Filedata::Filedata(const Filedata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filedatabase_(from.filedatabase_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(from._internal_filename(), 
      GetArenaForAllocation());
  }
  currentversion_ = from.currentversion_;
  // @@protoc_insertion_point(copy_constructor:fileVer.Filedata)
}

inline void Filedata::SharedCtor() {
filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currentversion_ = 0;
}

Filedata::~Filedata() {
  // @@protoc_insertion_point(destructor:fileVer.Filedata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Filedata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.Destroy();
}

void Filedata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Filedata::Clear() {
// @@protoc_insertion_point(message_clear_start:fileVer.Filedata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filedatabase_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  currentversion_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filedata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .fileVer.File filedatabase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filedatabase(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 currentversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currentversion(&has_bits);
          currentversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fileVer.Filedata.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filedata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fileVer.Filedata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fileVer.File filedatabase = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filedatabase_size()); i < n; i++) {
    const auto& repfield = this->_internal_filedatabase(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 currentversion = 2;
  if (_internal_has_currentversion()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currentversion(), target);
  }

  // optional string filename = 3;
  if (_internal_has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fileVer.Filedata.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fileVer.Filedata)
  return target;
}

size_t Filedata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fileVer.Filedata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fileVer.File filedatabase = 1;
  total_size += 1UL * this->_internal_filedatabase_size();
  for (const auto& msg : this->filedatabase_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional int32 currentversion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filedata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Filedata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filedata::GetClassData() const { return &_class_data_; }

void Filedata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Filedata *>(to)->MergeFrom(
      static_cast<const Filedata &>(from));
}


void Filedata::MergeFrom(const Filedata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fileVer.Filedata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filedatabase_.MergeFrom(from.filedatabase_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      currentversion_ = from.currentversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filedata::CopyFrom(const Filedata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fileVer.Filedata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filedata::IsInitialized() const {
  return true;
}

void Filedata::InternalSwap(Filedata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filedatabase_.InternalSwap(&other->filedatabase_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  swap(currentversion_, other->currentversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filedata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_filesversion_2eproto_getter, &descriptor_table_filesversion_2eproto_once,
      file_level_metadata_filesversion_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fileVer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fileVer::File*
Arena::CreateMaybeMessage< ::fileVer::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fileVer::File >(arena);
}
template<> PROTOBUF_NOINLINE ::fileVer::Filedata*
Arena::CreateMaybeMessage< ::fileVer::Filedata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fileVer::Filedata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
