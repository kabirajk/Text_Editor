// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_textfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_textfile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_textfile_2eproto;
namespace Files {
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectList;
struct ProjectListDefaultTypeInternal;
extern ProjectListDefaultTypeInternal _ProjectList_default_instance_;
}  // namespace Files
PROTOBUF_NAMESPACE_OPEN
template<> ::Files::Project* Arena::CreateMaybeMessage<::Files::Project>(Arena*);
template<> ::Files::ProjectList* Arena::CreateMaybeMessage<::Files::ProjectList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Files {

// ===================================================================

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Files.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Project& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Files.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kCreaterFieldNumber = 4,
    kCreatedTimeFieldNumber = 5,
    kModifiedTimeFieldNumber = 6,
    kProjectIdFieldNumber = 1,
    kCurrentVersionFieldNumber = 2,
  };
  // optional string fileName = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string creater = 4;
  bool has_creater() const;
  private:
  bool _internal_has_creater() const;
  public:
  void clear_creater();
  const std::string& creater() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creater(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creater();
  PROTOBUF_NODISCARD std::string* release_creater();
  void set_allocated_creater(std::string* creater);
  private:
  const std::string& _internal_creater() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creater(const std::string& value);
  std::string* _internal_mutable_creater();
  public:

  // optional string createdTime = 5;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdtime();
  PROTOBUF_NODISCARD std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional string ModifiedTime = 6;
  bool has_modifiedtime() const;
  private:
  bool _internal_has_modifiedtime() const;
  public:
  void clear_modifiedtime();
  const std::string& modifiedtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modifiedtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modifiedtime();
  PROTOBUF_NODISCARD std::string* release_modifiedtime();
  void set_allocated_modifiedtime(std::string* modifiedtime);
  private:
  const std::string& _internal_modifiedtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modifiedtime(const std::string& value);
  std::string* _internal_mutable_modifiedtime();
  public:

  // optional int32 projectId = 1;
  bool has_projectid() const;
  private:
  bool _internal_has_projectid() const;
  public:
  void clear_projectid();
  int32_t projectid() const;
  void set_projectid(int32_t value);
  private:
  int32_t _internal_projectid() const;
  void _internal_set_projectid(int32_t value);
  public:

  // optional int32 currentVersion = 2;
  bool has_currentversion() const;
  private:
  bool _internal_has_currentversion() const;
  public:
  void clear_currentversion();
  int32_t currentversion() const;
  void set_currentversion(int32_t value);
  private:
  int32_t _internal_currentversion() const;
  void _internal_set_currentversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Files.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creater_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifiedtime_;
  int32_t projectid_;
  int32_t currentversion_;
  friend struct ::TableStruct_textfile_2eproto;
};
// -------------------------------------------------------------------

class ProjectList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Files.ProjectList) */ {
 public:
  inline ProjectList() : ProjectList(nullptr) {}
  ~ProjectList() override;
  explicit PROTOBUF_CONSTEXPR ProjectList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectList(const ProjectList& from);
  ProjectList(ProjectList&& from) noexcept
    : ProjectList() {
    *this = ::std::move(from);
  }

  inline ProjectList& operator=(const ProjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectList& operator=(ProjectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectList* internal_default_instance() {
    return reinterpret_cast<const ProjectList*>(
               &_ProjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectList& a, ProjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProjectList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Files.ProjectList";
  }
  protected:
  explicit ProjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameListFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .Files.Project projectNameList = 1;
  int projectnamelist_size() const;
  private:
  int _internal_projectnamelist_size() const;
  public:
  void clear_projectnamelist();
  ::Files::Project* mutable_projectnamelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Files::Project >*
      mutable_projectnamelist();
  private:
  const ::Files::Project& _internal_projectnamelist(int index) const;
  ::Files::Project* _internal_add_projectnamelist();
  public:
  const ::Files::Project& projectnamelist(int index) const;
  ::Files::Project* add_projectnamelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Files::Project >&
      projectnamelist() const;

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Files.ProjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Files::Project > projectnamelist_;
  int32_t count_;
  friend struct ::TableStruct_textfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Project

// optional int32 projectId = 1;
inline bool Project::_internal_has_projectid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Project::has_projectid() const {
  return _internal_has_projectid();
}
inline void Project::clear_projectid() {
  projectid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Project::_internal_projectid() const {
  return projectid_;
}
inline int32_t Project::projectid() const {
  // @@protoc_insertion_point(field_get:Files.Project.projectId)
  return _internal_projectid();
}
inline void Project::_internal_set_projectid(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  projectid_ = value;
}
inline void Project::set_projectid(int32_t value) {
  _internal_set_projectid(value);
  // @@protoc_insertion_point(field_set:Files.Project.projectId)
}

// optional int32 currentVersion = 2;
inline bool Project::_internal_has_currentversion() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Project::has_currentversion() const {
  return _internal_has_currentversion();
}
inline void Project::clear_currentversion() {
  currentversion_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t Project::_internal_currentversion() const {
  return currentversion_;
}
inline int32_t Project::currentversion() const {
  // @@protoc_insertion_point(field_get:Files.Project.currentVersion)
  return _internal_currentversion();
}
inline void Project::_internal_set_currentversion(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  currentversion_ = value;
}
inline void Project::set_currentversion(int32_t value) {
  _internal_set_currentversion(value);
  // @@protoc_insertion_point(field_set:Files.Project.currentVersion)
}

// optional string fileName = 3;
inline bool Project::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_filename() const {
  return _internal_has_filename();
}
inline void Project::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::filename() const {
  // @@protoc_insertion_point(field_get:Files.Project.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Files.Project.fileName)
}
inline std::string* Project::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:Files.Project.fileName)
  return _s;
}
inline const std::string& Project::_internal_filename() const {
  return filename_.Get();
}
inline void Project::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_filename() {
  // @@protoc_insertion_point(field_release:Files.Project.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Files.Project.fileName)
}

// optional string creater = 4;
inline bool Project::_internal_has_creater() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_creater() const {
  return _internal_has_creater();
}
inline void Project::clear_creater() {
  creater_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::creater() const {
  // @@protoc_insertion_point(field_get:Files.Project.creater)
  return _internal_creater();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_creater(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 creater_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Files.Project.creater)
}
inline std::string* Project::mutable_creater() {
  std::string* _s = _internal_mutable_creater();
  // @@protoc_insertion_point(field_mutable:Files.Project.creater)
  return _s;
}
inline const std::string& Project::_internal_creater() const {
  return creater_.Get();
}
inline void Project::_internal_set_creater(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  creater_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_creater() {
  _has_bits_[0] |= 0x00000002u;
  return creater_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_creater() {
  // @@protoc_insertion_point(field_release:Files.Project.creater)
  if (!_internal_has_creater()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = creater_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creater_.IsDefault()) {
    creater_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_creater(std::string* creater) {
  if (creater != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  creater_.SetAllocated(creater, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creater_.IsDefault()) {
    creater_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Files.Project.creater)
}

// optional string createdTime = 5;
inline bool Project::_internal_has_createdtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Project::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void Project::clear_createdtime() {
  createdtime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Project::createdtime() const {
  // @@protoc_insertion_point(field_get:Files.Project.createdTime)
  return _internal_createdtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_createdtime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 createdtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Files.Project.createdTime)
}
inline std::string* Project::mutable_createdtime() {
  std::string* _s = _internal_mutable_createdtime();
  // @@protoc_insertion_point(field_mutable:Files.Project.createdTime)
  return _s;
}
inline const std::string& Project::_internal_createdtime() const {
  return createdtime_.Get();
}
inline void Project::_internal_set_createdtime(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  createdtime_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_createdtime() {
  _has_bits_[0] |= 0x00000004u;
  return createdtime_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_createdtime() {
  // @@protoc_insertion_point(field_release:Files.Project.createdTime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = createdtime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdtime_.IsDefault()) {
    createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  createdtime_.SetAllocated(createdtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createdtime_.IsDefault()) {
    createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Files.Project.createdTime)
}

// optional string ModifiedTime = 6;
inline bool Project::_internal_has_modifiedtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Project::has_modifiedtime() const {
  return _internal_has_modifiedtime();
}
inline void Project::clear_modifiedtime() {
  modifiedtime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Project::modifiedtime() const {
  // @@protoc_insertion_point(field_get:Files.Project.ModifiedTime)
  return _internal_modifiedtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_modifiedtime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 modifiedtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Files.Project.ModifiedTime)
}
inline std::string* Project::mutable_modifiedtime() {
  std::string* _s = _internal_mutable_modifiedtime();
  // @@protoc_insertion_point(field_mutable:Files.Project.ModifiedTime)
  return _s;
}
inline const std::string& Project::_internal_modifiedtime() const {
  return modifiedtime_.Get();
}
inline void Project::_internal_set_modifiedtime(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  modifiedtime_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_modifiedtime() {
  _has_bits_[0] |= 0x00000008u;
  return modifiedtime_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_modifiedtime() {
  // @@protoc_insertion_point(field_release:Files.Project.ModifiedTime)
  if (!_internal_has_modifiedtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = modifiedtime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modifiedtime_.IsDefault()) {
    modifiedtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_modifiedtime(std::string* modifiedtime) {
  if (modifiedtime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  modifiedtime_.SetAllocated(modifiedtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modifiedtime_.IsDefault()) {
    modifiedtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Files.Project.ModifiedTime)
}

// -------------------------------------------------------------------

// ProjectList

// repeated .Files.Project projectNameList = 1;
inline int ProjectList::_internal_projectnamelist_size() const {
  return projectnamelist_.size();
}
inline int ProjectList::projectnamelist_size() const {
  return _internal_projectnamelist_size();
}
inline void ProjectList::clear_projectnamelist() {
  projectnamelist_.Clear();
}
inline ::Files::Project* ProjectList::mutable_projectnamelist(int index) {
  // @@protoc_insertion_point(field_mutable:Files.ProjectList.projectNameList)
  return projectnamelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Files::Project >*
ProjectList::mutable_projectnamelist() {
  // @@protoc_insertion_point(field_mutable_list:Files.ProjectList.projectNameList)
  return &projectnamelist_;
}
inline const ::Files::Project& ProjectList::_internal_projectnamelist(int index) const {
  return projectnamelist_.Get(index);
}
inline const ::Files::Project& ProjectList::projectnamelist(int index) const {
  // @@protoc_insertion_point(field_get:Files.ProjectList.projectNameList)
  return _internal_projectnamelist(index);
}
inline ::Files::Project* ProjectList::_internal_add_projectnamelist() {
  return projectnamelist_.Add();
}
inline ::Files::Project* ProjectList::add_projectnamelist() {
  ::Files::Project* _add = _internal_add_projectnamelist();
  // @@protoc_insertion_point(field_add:Files.ProjectList.projectNameList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Files::Project >&
ProjectList::projectnamelist() const {
  // @@protoc_insertion_point(field_list:Files.ProjectList.projectNameList)
  return projectnamelist_;
}

// optional int32 count = 2;
inline bool ProjectList::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectList::has_count() const {
  return _internal_has_count();
}
inline void ProjectList::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ProjectList::_internal_count() const {
  return count_;
}
inline int32_t ProjectList::count() const {
  // @@protoc_insertion_point(field_get:Files.ProjectList.count)
  return _internal_count();
}
inline void ProjectList::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void ProjectList::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Files.ProjectList.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Files

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_textfile_2eproto
